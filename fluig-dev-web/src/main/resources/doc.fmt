[#ftl]
[#assign soapAvailable=docsxml.soap.wsdls.wsdl.endpointInterface?size > 0/]
[#assign restAvailable=docsxml.rest.resources.resource?size > 0/]
[#function scrubPathToFilename path]
  [#return "path_" + path?string?replace("/", "_")?replace(":","-")?replace("{", "-")?replace("}", "-") + ".html"/]
[/#function]
[#function tocNeeded(nodelist)]
  [#return nodelist?size > 2/]
[/#function]
[#function attributeExists(node)]
  [#if node?size??]
    [#--if there is a 'size' property, then it's not an attribute--]
    [#return node?size > 0/]
  [#else]
    [#return node?node_type = "attribute"/]
  [/#if]
[/#function]
[#function facetApplicable element facetName]
  [#list element.facets.facet as facet]
    [#if facet.name = facetName]
      [#return true/]
    [/#if]
  [/#list]
  [#return false/]
[/#function]
[#function isDeprecated element]
  [#return (getTagValues(element, "deprecated")?size > 0)/]
[/#function]
[#function getTagValues element tagName]
  [#assign tagvalues = [] /]
  [#list element.tag as tag]
    [#if tag.@name=tagName]
      [#assign tagvalues = tagvalues + [ tag ] /]
    [/#if]
  [/#list]
  [#if element?node_name = "resource"]
    [#assign operationtags = [] /]
    [#list element.operation as operation]
      [#list operation.tag as tag]
        [#if tag.@name=tagName]
          [#assign operationtags = operationtags + [ tag ] /]
        [/#if]
      [/#list]
    [/#list]
    [#if operationtags?size = element.operation?size]
      [#assign tagvalues = tagvalues + [ operationtags[0] ]/]
    [/#if]
  [/#if]
  [#return tagvalues/]
[/#function]

[#--set up the subnavigation menus--]
[#assign nav_sections = { "Tutorial" : "tutorial.html"} /]
[#if soapAvailable]
  [#assign nav_sections = nav_sections + { "SOAP" : "soap.html" }/]
[/#if]

[#if ((downloadsxml??) && (downloadsxml.download?size > 0))]
  [#assign nav_sections = nav_sections + { "Files and Libraries" : "downloads.html"} /]
[/#if]

[#assign nav_resource_facets = {}/]
[#if groupRestResources??]
  [#list docsxml.rest.facets.facet?sort_by("value") as facet]
    [#if facet.name = groupRestResources]
      [#assign nav_resource_facets = nav_resource_facets + { facet.documentation[0] : "resource_" + facet.value + ".html"}/]
    [/#if]
  [/#list]
[/#if]

[#assign nav_paths = {}/]
[#list docsxml.rest.resources.resource?sort_by("@name") as resource]
  [#assign nav_paths = nav_paths + {resource.@name?string : scrubPathToFilename(resource.@name)}/]
[/#list]

[#assign nav_wsdls = {}/]
[#assign nav_eis_by_ns = {}/]
[#list docsxml.soap.wsdls.wsdl as wsdl]
  [#assign nav_wsdls = nav_wsdls + {wsdl.@namespaceId?string : "soap_" + wsdl.@namespaceId?string + ".html"}/]
  [#assign nav_eis_by_ns = nav_eis_by_ns + {wsdl.@namespaceId?string : {}}/]
  [#list wsdl.endpointInterface?sort_by("@name") as endpointInterface]
    [#assign tmp = nav_eis_by_ns[wsdl.@namespaceId?string] + {endpointInterface.@name?string : "soap_" + wsdl.@namespaceId?string + "_" + endpointInterface.@name?string + ".html"}/]
    [#assign nav_eis_by_ns = nav_eis_by_ns + {wsdl.@namespaceId?string : tmp}/]
  [/#list]
[/#list]

[#assign nav_models = {}/]
[#assign nav_typedefs_by_ns = {}/]
[#assign nav_elements_by_ns = {}/]
[#list docsxml.data.schema as schema]
  [#assign nav_models = nav_models + {schema.@namespaceId?string : schema.@namespaceId?string + ".html"}/]
  [#assign nav_elements_by_ns = nav_elements_by_ns + {schema.@namespaceId?string : {}}/]
  [#list schema.elements.element?sort_by("@name") as element]
    [#assign tmp = nav_elements_by_ns[schema.@namespaceId?string] + { element.@name?string + " element" : "el_" + schema.@namespaceId?string + "_" + element.@name?string + ".html"}/]
    [#assign nav_elements_by_ns = nav_elements_by_ns + {schema.@namespaceId?string : tmp}/]
  [/#list]
  [#assign nav_typedefs_by_ns = nav_typedefs_by_ns + {schema.@namespaceId?string : {}}/]
  [#list schema.types.type?sort_by("@name") as type]
    [#assign tmp = nav_typedefs_by_ns[schema.@namespaceId?string] + {type.@name?string : schema.@namespaceId?string + "_" + type.@name?string + ".html"}/]
    [#assign nav_typedefs_by_ns = nav_typedefs_by_ns + {schema.@namespaceId?string : tmp}/]
  [/#list]
[/#list]

[#macro boilerplate title=docsxml.@title!"Web API" subnav=[{"title" : "Home", "href" : indexPageName}] codeblocks=true]
<!doctype html>
<!-- paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/ -->
<!--[if lt IE 7 ]> <html class="no-js ie6" lang="en"> <![endif]-->
<!--[if IE 7 ]>    <html class="no-js ie7" lang="en"> <![endif]-->
<!--[if IE 8 ]>    <html class="no-js ie8" lang="en"> <![endif]-->
<!--[if (gte IE 9)|!(IE)]><!--> <html class="no-js" lang="en"> <!--<![endif]-->
<head>
  <meta charset="utf-8">

  <!-- Always force latest IE rendering engine (even in intranet) & Chrome Frame
       Remove this if you use the .htaccess -->
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

  <title>${title}</title>

  <!-- Mobile viewport optimized: j.mp/bplateviewport -->
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <!-- CSS: implied media="all" -->
  <link rel="stylesheet" href="css/style.css?v=2">
  <link href="http://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet" type="text/css">
  <link rel="stylesheet" href="css/prettify.css">
  [#list additionalCssFiles as additionalCssFile]
  <link rel="stylesheet" href="${additionalCssFile}">
  [/#list]

  <!-- All JavaScript at the bottom, except for Modernizr which enables HTML5 elements & feature detects -->
  <script src="js/libs/modernizr-1.7.min.js"></script>

</head>

<body class="home">

	<div class="container">

		<header>
			<div id="header" class="column first last span-24">
      
				<div id="site-name" class="column span-24 first last">
					<img class="logo-fluig" src="resources/images/logo-fluig.png" alt="Fluig" title="Fluig" />
					<h1>
						<a href="${indexPageName}">Public API</a>
					</h1>
				</div>
        
				<div class="nav-menu-main">
					<ul class="fluig-breadcrumb xbreadcrumbs" id="breadcrumbs">
						[#list subnav as crumb]
						<li>
							<a href="${crumb.href}" class="[#if crumb_index = 0]home[/#if][#if !crumb_has_next]current[/#if]">${crumb.title}</a>[#if crumb_has_next] &gt;[/#if]
							[#if crumb.subnav??]
								<ul>
								[#list crumb.subnav?keys as label]
									<li><a href="${crumb.subnav[label]}">${label}</a></li>
								[/#list]
								</ul>
							[/#if]
						</li>
						[/#list]
					</ul>
				</div>
			</div>
		</header>
    
		<div id="main" class="column first last span-24">
			[#nested/]

			<div class="clear" />
		</div>
    
    <footer>
      <div id="footer">
        [#if attributeExists(docsxml.@copyright)]
        Copyright &copy; <script type="text/javascript" language="javascript">d = new Date;document.write(d.getFullYear());</script> <span xmlns:cc="http://creativecommons.org/ns#" property="cc:attributionName">${docsxml.@copyright}</span><br/>
        [/#if]
        Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
      </div>
    </footer>
  </div> <!--! end of #container -->

  <!-- JavaScript at the bottom for fast page loading -->

  <!-- Grab Google CDN's jQuery, with a protocol relative URL; fall back to local if necessary -->
  <script src="//ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.js"></script>
  <script>window.jQuery || document.write("<script src='js/libs/jquery-1.5.1.min.js'>\x3C/script>")</script>

  <!--manage the navigation menu-->
  <script src="js/libs/xbreadcrumbs.js"></script>
  <script>
    $(function() {
      $('#breadcrumbs').xBreadcrumbs();
    });
  </script>

  [#if codeblocks]

  <!-- prettify code blocks. see http://code.google.com/p/google-code-prettify/ -->
  <script src="js/libs/prettify/prettify.js"></script>
  <script>
    $(function() {
      prettyPrint();
    });
  </script>

  [/#if]
  <!--[if lt IE 7 ]>
    <script src="js/libs/dd_belatedpng.js"></script>
    <script>DD_belatedPNG.fix("img, .png_bg"); // Fix any <img> or .png_bg bg-images. Also, please read goo.gl/mZiyb </script>
  <![endif]-->

[#--
  todo: uncomment to support google analytics measurements...
  <!-- mathiasbynens.be/notes/async-analytics-snippet Change UA-XXXXX-X to be your site's ID -->
  <script>
    var _gaq=[["_setAccount","UA-XXXXX-X"],["_trackPageview"]];
    (function(d,t){var g=d.createElement(t),s=d.getElementsByTagName(t)[0];g.async=1;
    g.src=("https:"==location.protocol?"//ssl":"//www")+".google-analytics.com/ga.js";
    s.parentNode.insertBefore(g,s)}(document,"script"));
  </script>
--]
</body>
</html>
[/#macro]
[@file name=indexPageName charset="utf-8"]
  [@boilerplate subnav=[{"title" : "Home", "href" : indexPageName}, {"title" : "Pages" , "href" : "tutorial.html", "subnav" : nav_sections}]]
    [#if docsxml.documentation?size > 0]
      <h1>Introduction</h1>

      <p>${docsxml.documentation}</p>

    [/#if]
    [#if restAvailable]

      <h1>Welcome to Fluig API.</h1>
      <p>
        The following services are available.                
      </p>
      <ul class="list-services-availables">
      [#if groupRestResources?? && facetApplicable(docsxml.rest, groupRestResources)]
        [#list docsxml.rest.facets.facet?sort_by("value") as facet]
          [#if facet.name = groupRestResources]
            [@processResourceFacet facet=facet/]
        <li><a href="resource_${facet.value}.html">[#list facet.documentation as documentation]${documentation}[/#list]</a></li>
          [/#if]
        [/#list]
      [#else]
        [#list docsxml.rest.resources.resource?sort_by("@name") as resource]
          [@processResource resource=resource/]
        <li[#if isDeprecated(resource)] class="deprecated"[/#if]><a href="${scrubPathToFilename(resource.@name)}">${resource.@name}</a></li>
        [/#list]
      [/#if]
      </ul>
      [#if ((downloadsxml??) && (downloadsxml.download?size > 0))]
      <p>
        The REST resources expose a data model that is supported by a set of client-side libraries that are made available on the
        <a href="downloads.html">files and libraries</a> page.
      </p>
      [/#if]
      [#if attributeExists(docsxml.rest.@wadl)]
      <!--<p>
        There is also a <a href="${docsxml.rest.@wadl}">WADL document</a> describing the REST API.
      </p>-->
      [/#if]
      [#if swaggerDir??]
      <h2>Swagger</h2>
      <p>
        You may also enjoy the <a href="${swaggerDir}/index.html">Swagger UI</a> provided for this API.
      </p>
      [/#if]
    [/#if]
    [#if soapAvailable]

      <h1>SOAP Endpoints</h1>
      <p>
        This API is exposed through a set of <a href="http://www.ws-i.org/Profiles/BasicProfile-1.0.html">WSI Basic Profile</a>
        -compliant SOAP v1.1 endpoints. The API supports <a href="http://www.w3.org/TR/2005/REC-xop10-20050125/">XML-binary Optimized Pacakging (XOP)</a>
        and <a href="http://www.w3.org/TR/2004/WD-soap12-mtom-20040608/">SOAP Message Transmission Optimization Mechanism (MTOM)</a>
        for transmission of binary data. The SOAP API is described by the following endpoints:
      </p>
      [#list docsxml.soap.wsdls.wsdl as wsdl]
        [@processWsdl wsdl=wsdl/]
      <h2>Namespace "${wsdl.@namespaceId}"</h2>
      <table>
        <tr>
          <td align="right">Namespace URI:</td>
          <td>[#if wsdl.@namespace?length > 0]${wsdl.@namespace}[#else](default namespace)[/#if]</td>
        </tr>
        [#if attributeExists(wsdl.@file)]
        <tr>
          <td align="right">WSDL:</td>
          <td><a href="${wsdl.@file}">${wsdl.@file}</a></td>
        </tr>
        [/#if]
      </table>
      <h3>Endpoints</h3>
      <ul>
      [#list wsdl.endpointInterface?sort_by("@name") as endpointInterface]
        [@processEndpointInterface endpointInterface=endpointInterface/]
        <li[#if isDeprecated(endpointInterface)] class="deprecated"[/#if]><a href="soap_${wsdl.@namespaceId}_${endpointInterface.@name}.html">${endpointInterface.@name}</a></li>
      [/#list]
      </ul>
      [/#list]
      [#if ((downloadsxml??) && (downloadsxml.download?size > 0))]
      <p>
        The SOAP API is also accessible by a set of client-side libraries that can be downloaded from the <a href="downloads.html">files and libraries page</a>.
      </p>
      [/#if]
    [/#if]

    [#list docsxml.data.schema as schema]
      [@processSchema schema=schema/]

      <h2>Namespace "${schema.@namespaceId}"</h2>
      <table>
        <tr>
          <td align="right">Namespace URI:</td>
          <td>[#if schema.@namespace?length > 0]${schema.@namespace}[#else](default namespace)[/#if]</td>
        </tr>
      [#if attributeExists(schema.@file)]
        <tr>
          <td align="right">XSD:</td>
          <td><a href="${schema.@file}">${schema.@file}</a></td>
        </tr>
      [/#if]
      </table>
      [#if schema.elements.element?size > 0]

        <h3>Data Elements</h3>

        <ul>
        [#list schema.elements.element?sort_by("@name") as element]
          <li[#if isDeprecated(element)] class="deprecated"[/#if]><a href="el_${schema.@namespaceId}_${element.@name}.html">${element.@name}</a></li>
        [/#list]
        </ul>
      [/#if]
      [#if schema.types.type?size > 0]

        <h3>Data Types</h3>
        <ul>
        [#list schema.types.type?sort_by("@name") as type]
          <li[#if isDeprecated(type)] class="deprecated"[/#if]><a href="${schema.@namespaceId}_${type.@name}.html">${type.@name}</a></li>
        [/#list]
        </ul>
      [/#if]
    [/#list]
    [#if docsxml.data.jsonSchema.type?size > 0]

      <h1>JSON Data Types</h1>
      <ul>
      [#list docsxml.data.jsonSchema.type as type]
        [@processJsonType type=type/]
        <li[#if isDeprecated(type)] class="deprecated"[/#if]><a href="json_${type?parent.@schemaId}_${type.@name}.html">${type.@name}</a></li>
      [/#list]
      </ul>
    [/#if]
  [/@boilerplate]
[/@file]
[@file name="tutorial.html" charset="utf-8"]
  [@boilerplate title="Tutorial" subnav=[{"title" : "Home", "href" : indexPageName}, {"title" : "Pages" , "href" : "tutorial.html", "subnav" : nav_sections}]]
    <h1>Tutorial</h1>
	<h3>Generating the documentation when adding new services/methods in the API</h3>
    <p>
     	It's really important that any service or method added or changed in the Public API keep the documentation
updated. There is an automatic mechanism to generate the documentation in build time, based on javadoc.
    </p>
    <p>
    	The format must be as follows (without the numbers):
    </p>
    <p>
<code class="prettyprint lang-java">/**
 * 1)
 * Returns the social counters of a given document and version:
 * number of likes, comments, denounces, shares and follows.
 * 2)
 * @param id &lt;div class="required"&gt;REQUIRED&lt;/div&gt; document's id
 * @param version document's version
 * 3)
 * @return &lt;h4>Response JSON (example):&lt;/h4&gt;
 * 			&lt;code class="prettyprint lang-javascript"&gt;{
 * 				  "documentId" : "10",		//document's id
 * 				  "version" : "1000",			//document's version
 *     			  "numberLikes" : "2", 		//the number of users that have liked the document
 *     			  "numberShares" : "3" 		//the number of times the document has been shared
 *         		}&lt;/code&gt;
 */
@GET
@Produces(EncodedMediaType.APPLICATION_JSON_UTF8)
@Path("/counter/{id}/{version}")
public SociableDocumentVO getDocumentCounters(@PathParam("id") Integer id, @PathParam("version") Integer version)
	throws APIException {
	...
}
</code>
    </p>
    <p>
    	<ol>
    		<li>A simple explanation about what the method does and how to use it.</li>
			<li>The name and definition of the parameters. If a parameter is required, it is essential mark it with &lt;div class="required"&gt;REQUIRED&lt;/div&gt;.</li>
			<li>The definition of the return object. It MUST BE always a JSON. The json object needs to be written inside the &lt;code&gt; tag, to be formatted correctly.
			Each attribute needs to be explained with a comment.</li>
			<li>By default, ALL THE METHODS MUST throw the APIException. The exceptions handled inside the method's
			body must be trated inside the ErrorHandler class.</li>
		</ol>
    </p>
    <p>
    	If the method is a POST, it MUST have only one parameter, which must be a JSON object.
		The format must be as follows (without the numbers):
    </p>
    <p><code class="prettyprint lang-java">/**
* 1)
* Likes a given document/version.
* 2)
* @param vo &lt;h4&gt;Request JSON (example):&lt;/h4&gt;
* 				&lt;code class="prettyprint lang-javascript"&gt;{
* 					"documentId" : "10",	//document's id 
* 					"version" : "1000"		//document's version
* 				}&lt;/code&gt;
*
* 3)
* @return &lt;h4&gt;Response JSON (example):&lt;/h4&gt;
* 			&lt;code class="prettyprint lang-javascript"&gt;{
* 				  "documentId" : "10",		//document's id
* 				  "version" : "1000"			//document's version
*           		}&lt;/code&gt;
*
*/
@POST
@Consumes(MediaType.APPLICATION_JSON)
@Produces(EncodedMediaType.APPLICATION_JSON_UTF8)
@Path("/like")
public SociableDocumentVO like(SociableDocumentLikeVO sociableDocumentLikeVO) throws APIException {
	...
}</code>
    </p>
    <p>
    	<ol>
    		<li>A simple explanation about what the method does and how to use it.</li>
			<li>The structure of the JSON object which is the method's parameter.</li>
			<li>The definition of the return object. It MUST BE always a JSON. The json object needs to be written inside the &lt;code&gt; tag, to be formatted correctly.
			Each attribute needs to be explained with a comment.</li>
			<li>By default, ALL THE METHODS MUST throw the APIException. The exceptions handled inside the method's
			body must be trated inside the ErrorHandler class.</li>
		</ol>
    </p>
    <p>
    	If the @param or a JSON attribute is a value restricted by an enumeration, all the options should be typed:
    </p>
    <p>
    	<h5>@param</h5>
    	<code java-lang>* @param type (PHOTO | VIDEO)</code>
    	<h5>JSON attribute</h5>
    	<code java-lang>
* @param socialDocsDto &lt;h4&gt;Request JSON (example):&lt;/h4&gt;
* 			  	 	 	&lt;code class="prettyprint lang-javascript"&gt;{
* 							"type" : "PHOTO"		//gallery's type. It can be "PHOTO" or "VIDEO"
*	 					}&lt;/code&gt;
</code>
    </p>
    <p>
    	If the method returns a list, it should be especified with "Response List of JSON".
    </p>
    <p>
    	<code java-lang>
* @return &lt;h4&gt;Response List of JSON (example):&lt;/h4&gt;
*		  &lt;code class="prettyprint lang-javascript"&gt;[{
*    			"id" : "1"		//document id,
*			"name" : "Document 01" 	//document name
*		  }]&lt;/code&gt;
	</code>
    </p>
    <p>
    	The generated documentation can be accessed in http(s)://[host]:[port]/api
    </p>
    <p>
    	*If the documentation doesn't include your changes, try rebuild and redeploy the api-public module.
    </p>
    <p>
    
    </p>
    [#list docsxml.data.schema as schema]

    <h2>Namespace "${schema.@namespaceId}"</h2>
    <table>
      <tr>
        <td align="right">Namespace URI:</td>
        <td>[#if schema.@namespace?length > 0]${schema.@namespace}[#else](default namespace)[/#if]</td>
      </tr>
      [#if attributeExists(schema.@file)]
      <tr>
        <td align="right">XSD:</td>
        <td><a href="${schema.@file}">${schema.@file}</a></td>
      </tr>
      [/#if]
    </table>
      [#if schema.elements.element?size > 0]

    <h3>Data Elements</h3>

    <ul>
      [#list schema.elements.element?sort_by("@name") as element]
      <li[#if isDeprecated(element)] class="deprecated"[/#if]><a href="el_${schema.@namespaceId}_${element.@name}.html">${element.@name}</a></li>
      [/#list]
    </ul>
      [/#if]
      [#if schema.types.type?size > 0]

    <h3>Data Types</h3>
    <ul>
        [#list schema.types.type?sort_by("@name") as type]
      <li[#if isDeprecated(type)] class="deprecated"[/#if]><a href="${schema.@namespaceId}_${type.@name}.html">${type.@name}</a></li>
        [/#list]
    </ul>
      [/#if]
    [/#list]
  [/@boilerplate]
[/@file]
[#if ((downloadsxml??) && (downloadsxml.download?size > 0))]
  [@file name="downloads.html" charset="utf-8"]
    [@boilerplate title="Files and Libraries" subnav=[{"title" : "Home", "href" : indexPageName}, { "title" : "Files and Libraries" , "href" : "downloads.html" , "subnav" : nav_sections}] codeblocks=true]
  <h1>Files and Libraries</h1>

  <p>The following files and libraries are available:</p>

  <ul class="list-services-availables">
      [#list downloadsxml.download as download]
    <li><a href="#${download.@name}">${download.@name}</a></li>
      [/#list]
  </ul>
      [#list downloadsxml.download as download]
  <a name="${download.@name}"></a>
  <h2>${download.@name}</h2>
        [#list download.created as created]
  <p class="note">Created ${created}</p>
        [/#list]
        [#list download.description as description]
  <p>${description}</p>
        [/#list]
  <h3>Files</h3>
  <table>
    <tr>
      <th>name</th>
      <th>size</th>
        [#if download.files.file?size > 1]
      <th>description</th>
        [/#if]
    </tr>
        [#list download.files.file as file]
    <tr>
      <td><a href="${file.@name}">${file.@name}</a></td>
      <td>${file.@size}</td>
          [#if file_index > 0 || file_has_next]
      <td>${file}</td>
          [/#if]
    </tr>
        [/#list]
  </table>
      [/#list]
    [/@boilerplate]
  [/@file]
[/#if]
[#if soapAvailable]
  [@file name="soap.html" charset="utf-8"]
    [@boilerplate title="SOAP" subnav=[{"title" : "Home", "href" : indexPageName}, {"title" : "SOAP" , "href" : "soap.html", "subnav" : nav_sections}]]
  <h1>SOAP Endpoints</h1>
  <p>
    This API is exposed through a set of <a href="http://www.ws-i.org/Profiles/BasicProfile-1.0.html">WSI Basic Profile</a>
    -compliant SOAP v1.1 endpoints. The API supports <a href="http://www.w3.org/TR/2005/REC-xop10-20050125/">XML-binary Optimized Pacakging (XOP)</a>
    and <a href="http://www.w3.org/TR/2004/WD-soap12-mtom-20040608/">SOAP Message Transmission Optimization Mechanism (MTOM)</a>
    for transmission of binary data. The SOAP API is fully described by the following endpoints:
  </p>
      [#list docsxml.soap.wsdls.wsdl as wsdl]
  <h2>Namespace "${wsdl.@namespaceId}"</h2>
  <table>
    <tr>
      <td align="right">Namespace URI:</td>
      <td>[#if wsdl.@namespace?length > 0]${wsdl.@namespace}[#else](default namespace)[/#if]</td>
    </tr>
        [#if attributeExists(wsdl.@file)]
    <tr>
      <td align="right">WSDL:</td>
      <td><a href="${wsdl.@file}">${wsdl.@file}</a></td>
    </tr>
        [/#if]
  </table>
  <h3>Endpoints</h3>
  <ul>
      [#list wsdl.endpointInterface?sort_by("@name") as endpointInterface]
    <li[#if isDeprecated(endpointInterface)] class="deprecated"[/#if]><a href="soap_${wsdl.@namespaceId}_${endpointInterface.@name}.html">${endpointInterface.@name}</a></li>
      [/#list]
  </ul>
      [/#list]
      [#if ((downloadsxml??) && (downloadsxml.download?size > 0))]
  <p>
    The SOAP API is also accessible by a set of client-side libraries that can be downloaded from the <a href="downloads.html">files and libraries page</a>.
  </p>
      [/#if]
    [/@boilerplate]
  [/@file]
[/#if]
[#macro processWsdl wsdl]
  [@file name="soap_" + wsdl.@namespaceId + ".html" charset="utf-8"]
    [@boilerplate title="SOAP: " + wsdl.@namespaceId subnav=[{"title" : "Home", "href" : indexPageName}, {"title" : "SOAP" , "href" : "soap.html", "subnav" : nav_sections }, { "title" : wsdl.@namespaceId?string , "href" : "soap_" + wsdl.@namespaceId + ".html" }]]
  <h1>${wsdl.@namespaceId}</h1>
  <table>
    <tr>
      <td align="right">Namespace URI:</td>
      <td>[#if wsdl.@namespace?length > 0]${wsdl.@namespace}[#else](default namespace)[/#if]</td>
    </tr>
        [#if attributeExists(wsdl.@file)]
    <tr>
      <td align="right">WSDL:</td>
      <td><a href="${wsdl.@file}">${wsdl.@file}</a></td>
    </tr>
        [/#if]
  </table>
  <h3>Endpoints</h3>
  <ul>
      [#list wsdl.endpointInterface?sort_by("@name") as endpointInterface]
    <li[#if isDeprecated(endpointInterface)] class="deprecated"[/#if]><a href="soap_${wsdl.@namespaceId}_${endpointInterface.@name}.html">${endpointInterface.@name}</a></li>
      [/#list]
  </ul>
    [/@boilerplate]
  [/@file]
[/#macro]
[#macro processResourceFacet facet]
  [@file name="resource_" + facet.value + ".html" charset="utf-8"]
    [@boilerplate title=facet.value subnav=[{"title" : "Home", "href" : indexPageName}, {"title" : "Pages" , "href" : "tutorial.html", "subnav" : nav_sections}, {"title" : facet.documentation[0] , "href" : "resource_" + facet.value + ".html", "subnav" : nav_resource_facets}]]
      <!--<h1>${facet.value}</h1>-->

      [#list facet.documentation as documentation]
      <h1>${documentation}</h1>
      [/#list]
      [#assign resources=[] /]
      [#list docsxml.rest.resources.resource?sort_by("@name") as resource]
        [#list resource.facets.facet as rg]
          [#if ((rg.name = facet.name) && (rg.value == facet.value))]
            [#assign resources=resources + resource /]
            [#break/]
          [/#if]
        [/#list]
      [/#list]
      <p>The following resources are applicable:</p>
      <ul class="list-services-availables">
        [#list resources as resource]
        <li[#if isDeprecated(resource)] class="deprecated"[/#if]><a href="#${scrubPathToFilename(resource.@name)}">${resource.@name}</a></li>
        [/#list]
      </ul>
      [#list resources as resource]
      <a name="${scrubPathToFilename(resource.@name)}"></a>
        [@processRawResource resource=resource/]
      [/#list]
    [/@boilerplate]
  [/@file]
[/#macro]
[#macro processResource resource]
  [#assign resource_filename=scrubPathToFilename(resource.@name)/]
  [@file name=resource_filename charset="utf-8"]
    [@boilerplate title=facet subnav=[{"title" : "Home", "href" : indexPageName}, { "title" : "Pages" , "href" : "tutorial.html", "subnav" : nav_sections }, {"title" : resource.@name , "href" : resource_filename, "subnav" : nav_paths}]]
      [@processRawResource resource=resource/]
    [/@boilerplate]
  [/@file]
[/#macro]
[#macro processRawResource resource]
      <h1>${resource.@name}</h1>
  [#if isDeprecated(resource)]
  <p class="alert">This resource has been deprecated.</p>
  [/#if]
  [#if attributeExists(resource.@subcontext) && !disableRestMountpoint!false]
      <p class="note">Mount Point: <a href="${apiRelativePath}${resource.@subcontext}${resource.@name}">${resource.@subcontext}${resource.@name}</a></p>
  [/#if]
  [#assign sinceTags = getTagValues(resource, "since") /]
  [#if sinceTags?size > 0]
      <p class="note">Available Since: ${sinceTags[0]}</p>
  [/#if]
  [#assign versionTags = getTagValues(resource, "version") /]
  [#if versionTags?size > 0]
      <p class="note">Version: ${versionTags[0]}</p>
  [/#if]
  [#if tocNeeded(resource.operation)]
      <p>
        The following operations are supported on this resource:
      </p>
      <ul>
    [#list resource.operation as operation]
        <li[#if isDeprecated(operation)] class="deprecated"[/#if]><a href="#${operation.@name}">${operation.@name}</a></li>
      [#list operation.alias as alias]
        <li[#if isDeprecated(operation)] class="deprecated"[/#if]><a href="#${operation.@name}">${alias}</a></li>
      [/#list]
    [/#list]
      </ul>
  [/#if]
  [#list resource.operation as operation]
      <a name="${operation.@name}"></a>
      <h2><span>HTTP Method:</span> ${operation.@name}</h2>
    [#list operation.alias as alias]
      <p class="note">Alias: ${alias}</p>
    [/#list]
    [#assign sinceTags = getTagValues(operation, "since") /]
    [#if sinceTags?size > 0]
      <p class="note">Available Since: ${sinceTags[0]}</p>
    [/#if]
    [#assign versionTags = getTagValues(operation, "version") /]
    [#if versionTags?size > 0]
      <p class="note">Version: ${versionTags[0]}</p>
    [/#if]
    [#if isDeprecated(operation)]
      <p class="alert">This operation has been deprecated. [#list operation.tag as tag][#if tag.@name="deprecated"] ${tag}[/#if][/#list]</p>
    [/#if]
    [#list operation.documentation as documentation]
      <p>${documentation}</p>
    [/#list]
    [#list operation.parameter as parameter]
      [#if parameter_index = 0]
      <h3>Parameters</h3>
      <table>
        <tr>
          <th>name</th>
          <th>description</th>
          <th>type</th>
          <!--<th>default</th>-->
        </tr>
      [/#if]
        <tr>
          <td>[#if attributeExists(parameter.@name)]${parameter.@name}[/#if]</td>
          <td>${parameter}</td>
          <td>[#if attributeExists(parameter.@type)]${parameter.@type}[/#if]</td>
          <!--<td>[#if attributeExists(parameter.@defaultValue)]${parameter.@defaultValue}[/#if]</td>-->
        </tr>
      [#if !parameter_has_next]
      </table>
      [/#if]
    [/#list]
    [#list operation.inValue as inValue]
      <h3>Request Body</h3>
      <!--<table>
      [#assign custom=true]
      [#list inValue.xmlElement as xmlElement]
        [#if attributeExists(xmlElement.@elementName)]
          [#assign custom=false/]
        <tr>
          <td align="right">element:</td>
          [#if attributeExists(xmlElement.@elementSchemaId)]
          <td><a href="el_${xmlElement.@elementSchemaId}_${xmlElement.@elementName}.html">${xmlElement.@elementName}</a></td>
          [#else]
          <td>${xmlElement.@elementName}</td>
          [/#if]
        </tr>
        [/#if]
      [/#list]
      [#list inValue.jsonElementRef as jsonElement]
        [#if attributeExists(jsonElement.@elementName)]
          [#assign custom=false/]
        <tr>
          <td align="right">element:</td>
          [#if attributeExists(jsonElement.@elementSchemaId)]
          <td><a href="json_${jsonElement.@elementSchemaId}_${jsonElement.@elementName}.html">${jsonElement.@elementName}</a></td>
          [#else]
          <td>${jsonElement.@elementName}</td>
          [/#if]
        </tr>
        [/#if]
      [/#list]
      [#if custom]
        <tr>
          <td align="right">element:</td>
          <td>(custom)</td>
        </tr>
      [/#if]
        <tr>
          <td align="right">media types:</td>
          <td>[#list operation.contentType as contentType][#if contentType.@consumable = "true"]${contentType.@type}[#if contentType_has_next]<br/>[/#if][/#if][/#list]</td>
        </tr>
      </table>-->
      [#list inValue.documentation as documentation]
      <p>${documentation}</p>
      [/#list]
    [/#list]
    [#list operation.outValue as outValue]
      <h3>Response Body</h3>
      <!--<table>
      [#assign custom=true]
      [#list outValue.xmlElement as xmlElement]
        [#if attributeExists(xmlElement.@elementName)]
          [#assign custom=false/]
        <tr>
          <td align="right">element:</td>
          [#if attributeExists(xmlElement.@elementSchemaId)]
          <td><a href="el_${xmlElement.@elementSchemaId}_${xmlElement.@elementName}.html">${xmlElement.@elementName}</a></td>
          [#else]
          <td>${xmlElement.@elementName}</td>
          [/#if]
        </tr>
        [/#if]
      [/#list]
      [#list outValue.jsonElementRef as jsonElement]
        [#if attributeExists(jsonElement.@elementName)]
          [#assign custom=false/]
        <tr>
          <td align="right">element:</td>
          [#if attributeExists(jsonElement.@elementSchemaId)]
          <td><a href="json_${jsonElement.@elementSchemaId}_${jsonElement.@elementName}.html">${jsonElement.@elementName}</a></td>
          [#else]
          <td>${jsonElement.@elementName}</td>
          [/#if]
        </tr>
        [/#if]
      [/#list]
      [#if custom]
        <tr>
          <td align="right">element:</td>
          <td>(custom)</td>
        </tr>
      [/#if]
        <tr>
          <td align="right">media types:</td>
          <td>[#list operation.contentType as contentType][#if contentType.@produceable = "true"]${contentType.@type}[#if contentType_has_next]<br/>[/#if][/#if][/#list]</td>
        </tr>
      </table>-->
      [#list outValue.documentation as documentation]
      <p>${documentation}</p>
      [/#list]
    [/#list]
    [#list operation.statusCode as statusCode]
      [#if statusCode_index = 0]
      <h3>Status Codes</h3>
      <table>
        <tr>
          <th>code</th>
          <th>description</th>
        </tr>
      [/#if]
        <tr>
          <td>${statusCode.@code}</td>
          <td>${statusCode}</td>
        </tr>
      [#if !statusCode_has_next]
      </table>
      [/#if]
    [/#list]
    [#list operation.warning as warning]
      [#if warning_index = 0]
      <h3>Warnings</h3>
      <table>
        <tr>
          <th>code</th>
          <th>description</th>
        </tr>
      [/#if]
        <tr>
          <td>${warning.@code}</td>
          <td>${warning}</td>
        </tr>
      [#if !warning_has_next]
      </table>
      [/#if]
    [/#list]
    [#list operation.responseHeader as responseHeader]
      [#if responseHeader_index = 0]
      <h3>Response Headers</h3>
      <table>
        <tr>
          <th>name</th>
          <th>description</th>
        </tr>
      [/#if]
        <tr>
          <td>${responseHeader.name}</td>
          <td>${responseHeader.documentation}</td>
        </tr>
      [#if !responseHeader_has_next]
      </table>
      [/#if]
    [/#list]
  [/#list]
[/#macro]
[#macro processEndpointInterface endpointInterface]
  [@file name="soap_" + endpointInterface?parent.@namespaceId + "_" + endpointInterface.@name + ".html" charset="utf-8"]
    [@boilerplate title=endpointInterface.@name subnav=[{"title" : "Home", "href" : indexPageName}, {"title" : "SOAP" , "href" : "soap.html", "subnav" : nav_sections }, {"title" : endpointInterface?parent.@namespaceId , "href" : "soap_" + endpointInterface?parent.@namespaceId + ".html", "subnav" : nav_wsdls }, {"title" : endpointInterface.@name , "href" : "soap_" + endpointInterface.@name + ".html", "subnav" : nav_eis_by_ns[endpointInterface?parent.@namespaceId?string]}]]
      <h1>${endpointInterface.@name}</h1>
      [#if isDeprecated(endpointInterface)]
      <p class="alert">This endpoint has been deprecated.[#list endpointInterface.tag as tag][#if tag.@name="deprecated"] ${tag}[/#if][/#list]</p>
      [/#if]
      <table>
        <tr>
          <td align="right">Namespace:</td>
          <td>[#if (endpointInterface?parent).@namespace?length > 0]${(endpointInterface?parent).@namespace}[#else](default namespace)[/#if]</td>
        </tr>
        [#if attributeExists((endpointInterface?parent).@file)]
        <tr>
          <td align="right">WSDL:</td>
          <td><a href="${(endpointInterface?parent).@file}">${(endpointInterface?parent).@file}</a></td>
        </tr>
        [/#if]
        [#if attributeExists(endpointInterface.@path)]
          <tr>
            <td align="right">Path:</td>
            <td><a href="${apiRelativePath}${endpointInterface.@path}">${endpointInterface.@path}</a></td>
          </tr>
        [/#if]
        [#assign sinceTags = getTagValues(endpointInterface, "since") /]
        [#if sinceTags?size > 0]
          <tr>
            <td align="right">Available Since:</td>
            <td>${sinceTags[0]}</td>
          </tr>
        [/#if]
        [#assign versionTags = getTagValues(endpointInterface, "version") /]
        [#if versionTags?size > 0]
          <tr>
            <td align="right">Version:</td>
            <td>${versionTags[0]}</td>
          </tr>
        [/#if]
      </table>
      [#if endpointInterface.documentation?size > 0]
        [#list endpointInterface.documentation as documentation]
      <p>${documentation}</p>
        [/#list]
      [/#if]
      [#if tocNeeded(endpointInterface.method)]
      <p>
        The following methods are available on this endpoint:
      </p>
      <ul>
        [#list endpointInterface.method as method]
        <li[#if isDeprecated(method)] class="deprecated"[/#if]><a href="#${method.@name}">${method.@name}</a></li>
        [/#list]
      </ul>
      [/#if]
      [#list endpointInterface.method as method]
      <a name="${method.@name}"></a>
      <h2>${method.@name}</h2>
        [#if isDeprecated(method)]
      <p class="alert">This method has been deprecated.[#list method.tag as tag][#if tag.@name="deprecated"] ${tag}[/#if][/#list]</p>
        [/#if]
        [#assign sinceTags = getTagValues(method, "since") /]
        [#if sinceTags?size > 0]
      <p class="note">Available Since: ${sinceTags[0]}</p>
        [/#if]
        [#assign versionTags = getTagValues(method, "version") /]
        [#if versionTags?size > 0]
      <p class="note">Version: ${versionTags[0]}</p>
        [/#if]
        [#list method.documentation as documentation]
      <p>${documentation}</p>
        [/#list]
        [#list method["parameter[@input='true']"] as parameter]
          [#if parameter_index = 0]
      <h3>Input Parameters</h3>
      <table>
        <tr>
          <th>name</th>
          <th>type</th>
          <th>description</th>
        </tr>
          [/#if]
        <tr>
          <td>${parameter.@name}</td>
          <td>[#if attributeExists(parameter.@xmlTypeName)][#if attributeExists(parameter.@xmlTypeSchemaId)]<a href="${parameter.@xmlTypeSchemaId}_${parameter.@xmlTypeName}.html">${parameter.@xmlTypeName}</a>[#else]${parameter.@xmlTypeName}[/#if][#else](unknown)[/#if]</td>
          <td>${parameter}</td>
        </tr>
          [#if !parameter_has_next]
      </table>
          [/#if]
        [/#list]
        [#list method["parameter[@output='true']"] as parameter]
          [#if parameter_index = 0]
      <h3>Output Parameters</h3>
      <table>
        <tr>
          <th>name</th>
          <th>type</th>
          <th>description</th>
        </tr>
          [/#if]
        <tr>
          <td>${parameter.@name}</td>
          <td>[#if attributeExists(parameter.@xmlTypeName)][#if attributeExists(parameter.@xmlTypeSchemaId)]<a href="${parameter.@xmlTypeSchemaId}_${parameter.@xmlTypeName}.html">${parameter.@xmlTypeName}</a>[#else]${parameter.@xmlTypeName}[/#if][#else](unknown)[/#if]</td>
          <td>${parameter}</td>
        </tr>
          [#if !parameter_has_next]
      </table>
          [/#if]
        [/#list]
        [#list method.result as result]
      <h3>Return Value</h3>

      [#if attributeExists(result.@xmlTypeName)]
      <table>
        <tr>
          <td align="right">Type:</td>
          <td>[#if attributeExists(result.@xmlTypeSchemaId)]<a href="${result.@xmlTypeSchemaId}_${result.@xmlTypeName}.html">${result.@xmlTypeName}</a>[#else]${result.@xmlTypeName}[/#if]</td>
        </tr>
      </table>
      [/#if]

      <p>${result}</p>
        [/#list]
        [#list method.fault as fault]
          [#if fault_index = 0]
      <h3>Faults</h3>
      <table>
        <tr>
          <th>name</th>
          <!--todo: add the parameter type and whether its a collection-->
          <th>description</th>
        </tr>
          [/#if]
        <tr>
          <td>${fault.@name}</td>
          <td>${fault}</td>
        </tr>
          [#if !fault_has_next]
      </table>
          [/#if]
        [/#list]
      [/#list]
    [/@boilerplate]
  [/@file]
[/#macro]
[#macro processSchema schema]
  [@file name=schema.@namespaceId + ".html" charset="utf-8"]
    [@boilerplate title="Namespace: " + schema.@namespaceId subnav=[{"title" : "Home", "href" : indexPageName}, {"title" : "Tutorial" , "href" : "tutorial.html", "subnav" : nav_sections}, {"title" : schema.@namespaceId , "href" : schema.@namespaceId + ".html", "subnav" : nav_models}]]
      <h1>Namespace ${schema.@namespaceId}</h1>
      <table>
        <tr>
          <td align="right">Namespace:</td>
          <td>[#if schema.@namespace?length > 0]${schema.@namespace}[#else](default namespace)[/#if]</td>
        </tr>
        [#if attributeExists(schema.@file)]
        <tr>
          <td align="right">XML Schema:</td>
          <td><a href="${schema.@file}">${schema.@file}</a></td>
        </tr>
        [/#if]
      </table>
      [#if schema.elements.element?size > 0]

      <h2>Elements</h2>
      
      <ul>
        [#list schema.elements.element?sort_by("@name") as element]
        [@processElement element=element/]
        <li[#if isDeprecated(element)] class="deprecated"[/#if]><a href="el_${schema.@namespaceId}_${element.@name}.html">${element.@name}</a></li>
        [/#list]
      </ul>
      [/#if]
      [#if schema.types.type?size > 0]

      <h2>Types</h2>
      
      <ul>
        [#list schema.types.type?sort_by("@name") as type]
        [@processType type=type/]
        <li[#if isDeprecated(type)] class="deprecated"[/#if]><a href="${schema.@namespaceId}_${type.@name}.html">${type.@name}</a></li>
        [/#list]
      </ul>
      [/#if]
    [/@boilerplate]
  [/@file]
[/#macro]
[#macro processElement element]
  [#assign schema=element?parent?parent/]
  [@file name="el_" + schema.@namespaceId + "_" + element.@name + ".html" charset="utf-8"]
    [@boilerplate title=element.@name subnav=[{"title" : "Home", "href" : indexPageName}, {"title" : "Tutorial" , "href" : "tutorial.html", "subnav" : nav_sections}, {"title" : schema.@namespaceId , "href" : schema.@name + ".html", "subnav" : nav_models}, {"title" : element.@name + " element" , "href" : "el_" + schema.@namespaceId + "_" + element.@name + ".html", "subnav" : nav_elements_by_ns[schema.@namespaceId?string]}] codeblocks=true]
      <h1>${element.@name} element</h1>
      [#if isDeprecated(element)]
      <p class="alert">This element has been deprecated.[#list element.tag as tag][#if tag.@name="deprecated"] ${tag}[/#if][/#list]</p>
      [/#if]
      <table>
      [#if attributeExists(element.@typeName) && attributeExists(element.@typeSchemaId)]
        <tr>
          <td align="right">Type:</td>
          <td><a href="${element.@typeSchemaId}_${element.@typeName}.html">${element.@typeName}</a></td>
        </tr>
      [/#if]
        <tr>
          <td align="right">Namespace:</td>
          <td>[#if schema.@namespace?length > 0]${schema.@namespace}[#else](default namespace)[/#if]</td>
        </tr>
        [#if attributeExists(schema.@file)]
        <tr>
          <td align="right">XML Schema:</td>
          <td><a href="${schema.@file}">${schema.@file}</a></td>
        </tr>
        [/#if]
        [#assign sinceTags = getTagValues(element, "since") /]
        [#if sinceTags?size > 0]
        <tr>
          <td align="right">Available Since:</td>
          <td>${sinceTags[0]}</td>
        </tr>
        [/#if]
        [#assign versionTags = getTagValues(element, "version") /]
        [#if versionTags?size > 0]
        <tr>
          <td align="right">Available Version:</td>
          <td>${versionTags[0]}</td>
        </tr>
        [/#if]
      </table>
      [#list element.documentation as documentation]
      <p>${documentation}</p>
      [/#list]
      [#list element.examplexml as examplexml]
      <h2>Example XML</h2>
      <code class="prettyprint lang-xml">${examplexml?string?xhtml}</code>
      [/#list]
      [#list element.examplejson as examplejson]
      <h2>Example JSON</h2>
      <code class="prettyprint lang-js">${examplejson?string?xhtml}</code>
      [/#list]
    [/@boilerplate]
  [/@file]
[/#macro]
[#macro processType type]
  [#assign schema=type?parent?parent/]
  [@file name=schema.@namespaceId + "_" + type.@name + ".html" charset="utf-8"]
    [@boilerplate title=type.@name subnav=[{"title" : "Home", "href" : indexPageName}, {"title" : "Tutorial" , "href" : "tutorial.html", "subnav" : nav_sections}, {"title" : schema.@name , "href" : schema.@namespaceId + ".html", "subnav" : nav_models} , {"title" : type.@name , "href" : schema.@namespaceId + "_" + type.@name + ".html", "subnav" : nav_typedefs_by_ns[schema.@namespaceId?string]}] codeblocks=true]
      <h1>${type.@name}</h1>
      [#if isDeprecated(type)]
      <p class="alert">This type has been deprecated.[#list type.tag as tag][#if tag.@name="deprecated"] ${tag}[/#if][/#list]</p>
      [/#if]
      <table>
      [#if attributeExists(type.@extendsType)]
        [#list docsxml.data.schema.types.type as candidate]
          [#if attributeExists(candidate.@id) && (candidate.@id?string = type.@extendsType?string)]
        <tr>
          <td align="right">Extends:</td>
          <td><a href="${candidate?parent?parent.@namespaceId}_${candidate.@name}.html">${candidate.@name}</a></td>
        </tr>
            [#break/]
          [/#if]
        [/#list]
      [/#if]
        <tr>
          <td align="right">Namespace:</td>
          <td>[#if schema.@namespace?length > 0]${schema.@namespace}[#else](default namespace)[/#if]</td>
        </tr>
        [#if attributeExists(schema.@file)]
        <tr>
          <td align="right">XML Schema:</td>
          <td><a href="${schema.@file}">${schema.@file}</a></td>
        </tr>
        [/#if]
        [#assign sinceTags = getTagValues(type, "since") /]
        [#if sinceTags?size > 0]
        <tr>
          <td align="right">Available Since:</td>
          <td>${sinceTags[0]}</td>
        </tr>
        [/#if]
        [#assign versionTags = getTagValues(type, "version") /]
        [#if versionTags?size > 0]
        <tr>
          <td align="right">Version:</td>
          <td>${versionTags[0]}</td>
        </tr>
        [/#if]
      </table>
      [#list type.documentation as documentation]
      <p>${documentation}</p>
      [/#list]

      [#if type.values.item?size > 0]
        [#list type.values.item as value]
          [#if value_index = 0]
      <h2>Possible Values</h2>
      <table>
        <tr>
          <th>value</th>
          <th>description</th>
        </tr>
          [/#if]
        <tr>
          <td[#if isDeprecated(value)] class="deprecated"[/#if]>${value.@value}</td>
          <td>
          [#list value.documentation as documentation]
            ${documentation}
          [/#list]
          </td>
        </tr>
          [#if !value_has_next]
      </table>
          [/#if]
        [/#list]
      [#else]
      <h2>XML</h2>
        [#list type.attributes.attribute as attribute]
          [#if attribute_index = 0]
      <h3>Attributes</h3>
      <table>
        <tr>
          <th>name</th>
          <th>type</th>
          <th>description</th>
        </tr>
          [/#if]
        <tr>
          <td>[#if attributeExists(attribute.@name)]${attribute.@name}[/#if]</td>
          <td>[#if attributeExists(attribute.@typeSchemaId)][#if attributeExists(attribute.@typeName)][#assign typename=attribute.@typeName/][#else][#assign typename="(anonymous)"/][/#if]<a href="${attribute.@typeSchemaId}_${typename}.html">${typename}</a>[#elseif attributeExists(attribute.@typeName)]${attribute.@typeName}[/#if]</td>
          <td>${attribute}</td>
        </tr>
          [#if !attribute_has_next]
      </table>
          [/#if]
        [/#list]
        [#list type.elements.element as element]
          [#if element_index = 0]
      <h3>Elements</h3>
      <table>
        <tr>
          <th>name (type)</th>
          <th>min/max<br/>occurs</th>
          <th>description</th>
        </tr>
          [/#if]
        <tr>
          <td>
          [#list element.choice as choice]
            [#if choice_index > 0]<br/>or [/#if][#if attributeExists(choice.@schemaId)]<a href="el_${choice.@schemaId}_${choice.@name}.html">${choice.@name}</a>[#else]${choice.@name}[/#if][#if attributeExists(choice.@typeSchemaId)][#if attributeExists(choice.@typeName)][#assign typename=choice.@typeName/][#else][#assign typename="(anonymous)"/][/#if] (<a href="${choice.@typeSchemaId}_${typename}.html">${typename}</a>)[#elseif attributeExists(choice.@typeName)] (${choice.@typeName})[/#if]
          [/#list]
          </td>
          <td>[#if attributeExists(element.@minOccurs)]${element.@minOccurs}[/#if]/[#if attributeExists(element.@maxOccurs)]${element.@maxOccurs}[/#if]</td>
          <td>
          [#list element.documentation as documentation]
            ${documentation}
          [/#list]
          </td>
        </tr>
          [#if !element_has_next]
      </table>
          [/#if]
        [/#list]
        [#list type.value as value]
      <h3>Value</h3>
      <table>
        <tr>
          <td align="right">Type:</td>
          <td>[#if attributeExists(value.@typeSchemaId)][#if attributeExists(value.@typeName)][#assign typename=value.@typeName/][#else][#assign typename="(anonymous)"/][/#if]<a href="${value.@typeSchemaId}_${typename}.html">${typename}</a>[#elseif attributeExists(value.@typeName)]${value.@typeName}[/#if]</td>
        </tr>
      </table>
      <p>${value}</p>
        [/#list]

        [#if includeExampleJson!true]
      <h2>JSON</h2>
      <table>
        <tr>
          <th>property</th>
          <th>type</th>
          <th>description</th>
        </tr>
          [#list type.attributes.attribute as attribute]
        <tr>
          <td>[#if attributeExists(attribute.@jsonName)]${attribute.@jsonName}[/#if]</td>
          <td>[#if attributeExists(attribute.@typeSchemaId)][#if attributeExists(attribute.@typeName)][#assign typename=attribute.@typeName/][#else][#assign typename="(anonymous)"/][/#if]<a href="${attribute.@typeSchemaId}_${typename}.html">${typename}</a>[#elseif attributeExists(attribute.@typeName)]${attribute.@typeName}[/#if]</td>
          <td>${attribute}</td>
        </tr>
          [/#list]
          [#list type.elements.element as element]
        <tr>
          <td>[#if attributeExists(element.@jsonName)]${element.@jsonName}[/#if]</td>
          <td>
            [#list element.choice as choice]
              [#if element.@maxOccurs = "unbounded"]array of [/#if][#if choice_index > 0]<br/>or [/#if][#if attributeExists(choice.@schemaId)]<a href="el_${choice.@schemaId}_${choice.@name}.html">${choice.@name}</a>[#else]${choice.@name}[/#if][#if attributeExists(choice.@typeSchemaId)][#if attributeExists(choice.@typeName)][#assign typename=choice.@typeName/][#else][#assign typename="(anonymous)"/][/#if] (<a href="${choice.@typeSchemaId}_${typename}.html">${typename}</a>)[#elseif attributeExists(choice.@typeName)] (${choice.@typeName})[/#if]
            [/#list]
          </td>
          <td>
            [#list element.documentation as documentation]
            ${documentation}
            [/#list]
          </td>
        </tr>
          [/#list]
          [#list type.value as value]
        <tr>
          <td>[#if attributeExists(value.@jsonName)]${value.@jsonName}[/#if]</td>
          <td>[#if attributeExists(value.@typeSchemaId)][#if attributeExists(value.@typeName)][#assign typename=value.@typeName/][#else][#assign typename="(anonymous)"/][/#if]<a href="${value.@typeSchemaId}_${typename}.html">${typename}</a>[#elseif attributeExists(value.@typeName)]${value.@typeName}[/#if]</td>
          <td>${value}</td>
        </tr>
          [/#list]
      </table>
        [/#if]
      [/#if]
    [/@boilerplate]
  [/@file]
[/#macro]
[#macro processJsonType type]
  [@file name="json_" + type?parent.@schemaId + "_" + type.@name + ".html" charset="utf-8"]
    [@boilerplate title=type.@name subnav=[{"title" : "Home", "href" : indexPageName}, {"title" : "JSON" , "href" : "#"}, {"title" : type.@name , "href" : "json_" + type?parent.@schemaId + "_" + type.@name + ".html"}] codeblocks=true]
      <h1>${type.@name}</h1>

      <table>
      [#if attributeExists(type?parent.@schemaId)]
      <tr>
        <td align="right">JSON Schema ID:</td>
        <td>${type?parent.@schemaId}</td>
      </tr>
      [/#if]
      [#if attributeExists(type?parent.@file)]
      <tr>
        <td align="right">JSON Schema File:</td>
        <td><a href="${type?parent.@file}">${type?parent.@file}</a></td>
      </tr>
      [/#if]
      [#assign sinceTags = getTagValues(type, "since") /]
      [#if sinceTags?size > 0]
      <tr>
        <td align="right">Available Since:</td>
        <td>${sinceTags[0]}</td>
      </tr>
      [/#if]
      [#assign versionTags = getTagValues(type, "version") /]
      [#if versionTags?size > 0]
      <tr>
        <td align="right">Available Version:</td>
        <td>${versionTags[0]}</td>
      </tr>
      [/#if]
      </table>
      [#list type.documentation as documentation]
      <p>${documentation}</p>
      [/#list]
      [#list type.property as property]
        [#if property_index = 0]
      <h2>Properties</h2>
      <table>
        <tr>
          <th>name</th>
          <th>type</th>
          <th>description</th>
        </tr>
        [/#if]
        <tr>
          <td>[#if attributeExists(property.@name)]${property.@name}[/#if]</td>
          <td>[#if property.@isList = "true"]List of [/#if][#if attributeExists(property.@typeSchemaId)][#if attributeExists(property.@typeName)][#assign typename=property.@typeName/][#else][#assign typename="(anonymous)"/][/#if]<a href="json_${property.@typeSchemaId}_${typename}.html">${typename}</a>[#elseif attributeExists(property.@typeName)]${property.@typeName}[/#if]</td>
          <td>[#if attributeExists(property.@documentation)]${property.@documentation}[/#if]</td>
        </tr>
        [#if !property_has_next]
      </table>
        [/#if]
      [/#list]
      [#list type.enumValue as enumValue]
        [#if enumValue_index = 0]
      <h2>Possible Values</h2>
      <table>
        <tr>
          <th>value</th>
          <th>description</th>
        </tr>
        [/#if]
        <tr>
          <td>[#list enumValue.value as value]${value} [/#list]</td>
          <td>[#list enumValue.documentation as documentation]${documentation} [/#list]</td>
        </tr>
        [#if !enumValue_has_next]
      </table>
        [/#if]
      [/#list]
    [/@boilerplate]
  [/@file]
[/#macro]